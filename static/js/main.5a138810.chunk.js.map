{"version":3,"sources":["components/Header.js","components/Homepage.js","components/Addroom.js","components/Room-Propeties.js","App.js","serviceWorker.js","index.js"],"names":["Header","Homepage","props","roomList","listRoom","map","e","to","name","style","backgroundColor","color","Addroom","useState","roomType","setRoomType","setColor","setName","value","onChange","target","type","placeholder","onClick","add","RoomPropeties","flag","setFlag","product","setProduct","productList","setProductList","roomName","showProducts","products","App","list","setList","listNotConcatenated","setListNotConcatenated","addRoom","length","alert","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a138810.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h1>Smart House</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Homepage(props) {\r\n\r\n\r\n  const roomList = props.listRoom.map((e) => \r\n  <Link to={'/room/'+e.name} style={{ backgroundColor: e.color }}>{e.name}<br/></Link>)\r\n  \r\n  return (\r\n    <div>\r\n     <div>{roomList}</div>\r\n        <Link to='/addroom'><button>+</button></Link>\r\n    </div >\r\n  )\r\n}\r\n","import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst BEDROOM_TYPE = 'Bedroom'\r\nconst BATHROOM_TYPE = 'Bathroom'\r\nconst KITCHEN_TYPE = 'Kitchen'\r\n\r\nexport default function Addroom(props) {\r\n\r\n    // const [bedroom, setBedroom] = useState('Bedroom');\r\n    // const [bathroom, setBathroom] = useState('BathRoom');\r\n    // const [kitchen, setKitchen] = useState('Kitchen');\r\n    const [roomType, setRoomType] = useState(BEDROOM_TYPE)\r\n    const [color, setColor] = useState('');\r\n    const [name, setName] = useState('');\r\n    \r\n\r\n    return (\r\n      \r\n        <div>\r\n            <select value={roomType} onChange={(e) => { setRoomType(e.target.value) }}>\r\n                <option value={BEDROOM_TYPE}>{BEDROOM_TYPE}</option>\r\n                <option value={BATHROOM_TYPE}>{BATHROOM_TYPE}</option>\r\n                <option value={KITCHEN_TYPE}>{KITCHEN_TYPE}</option>\r\n            </select>\r\n            <br/>\r\n            <input type='text' placeholder='Room name' onChange={(e)=>{setName(e.target.value)}}></input>\r\n            <br/>\r\n            <input type='color' onChange={(e)=>{setColor(e.target.value)}}></input>\r\n            <br/>\r\n            <Link to='/'><button onClick={()=>props.add(name, color, roomType)}>Create Room</button></Link>\r\n            <br/>\r\n            <Link to='/'><a>üè†</a></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport {Link } from 'react-router-dom';\r\n\r\n\r\nconst AC = 'AC';\r\nconst LIGHT = 'Light';\r\nconst STERO_SYSTEM = 'Setro System';\r\nconst BOILER = 'Boiler';\r\n\r\nexport default function RoomPropeties(props) {\r\n    const [flag, setFlag] = useState(false);\r\n    const [onOff, setOnOff] = useState(false);\r\n    const [onOffColor, setOnOffColor] = useState('')\r\n    const [product, setProduct] = useState(AC);\r\n    const [productList, setProductList] = useState([]);\r\n\r\n    const roomName = props.listRoom.map((e) => e.name);\r\n    const roomType = props.listRoom.map((e) => e.type);\r\n\r\n    const addProduct = (products) => setProductList([...productList, products])\r\n    const showProducts = productList.map((e) => <div><button>{productList}</button><br /></div>)\r\n\r\n    const show = () => {\r\n        if (flag === true) {\r\n            return <div>\r\n                <select value={product} onChange={(e) => setProduct(e.target.value)}>\r\n                    <option value={AC}>{AC}</option>\r\n                    <option value={LIGHT}>{LIGHT}</option>\r\n                    <option value={STERO_SYSTEM}>{STERO_SYSTEM}</option>\r\n                    <option value={BOILER}>{BOILER}</option>\r\n                </select>\r\n                <br />\r\n                <button onClick={() => addProduct(product)}>Select Product</button>\r\n                <button onClick={() => setFlag(false)}>back</button>\r\n            </div>\r\n        } else {\r\n            return <div>\r\n                Room name: {roomName}\r\n                <br />\r\n                Room type: {roomType}\r\n                <br />\r\n                {showProducts}\r\n                <button onClick={() => { setFlag(true) }}>Add New Products</button>\r\n            </div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {show()}\r\n            <br/>\r\n           <Link to='/'><a>üè†</a></Link>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Homepage from './components/Homepage';\nimport Addroom from './components/Addroom';\nimport RoomPropeties from './components/Room-Propeties';\n\n\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [listNotConcatenated, setListNotConcatenated] = useState([])\n  const addRoom = (name, color, type) => {\n    if (name.length > 5 || name.length === 0) {\n      alert('Error')\n    } else {\n      setList([...list, { name , color , type }])\n      setListNotConcatenated([{ name , type }])\n    }\n  }\n\n\n \n\n  return (\n    <div className=\"App\">\n\n      <Header />\n      <Router>\n        <Switch>\n          <Route exact path='/' component={() => <Homepage listRoom={list}/>}/>\n           <Route exact path='/addroom' component={() => <Addroom add={addRoom} />} />\n           <Route exact path='/room/:name' component={()=><RoomPropeties listRoom={listNotConcatenated}/>}/>\n      </Switch>\n    </Router>\n    </div>\n      );\n    }\n    \n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}